// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiseDiary.WebUI.Data;

namespace RiseDiary.WebUI.Migrations
{
    [DbContext(typeof(DiaryDbContext))]
    [Migration("20190726070702_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6");

            modelBuilder.Entity("RiseDiary.Model.AppSetting", b =>
                {
                    b.Property<string>("Key");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Value");

                    b.HasKey("Key");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("RiseDiary.Model.Cogitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.ToTable("Cogitations");
                });

            modelBuilder.Entity("RiseDiary.Model.DiaryImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Deleted");

                    b.Property<int>("Height");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<string>("Name");

                    b.Property<int>("SizeByte");

                    b.Property<byte[]>("Thumbnail");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("RiseDiary.Model.DiaryImageFull", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<Guid>("ImageId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("FullSizeImages");
                });

            modelBuilder.Entity("RiseDiary.Model.DiaryRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("RiseDiary.Model.DiaryRecordImage", b =>
                {
                    b.Property<Guid>("RecordId");

                    b.Property<Guid>("ImageId");

                    b.Property<bool>("Deleted");

                    b.HasKey("RecordId", "ImageId");

                    b.HasIndex("ImageId");

                    b.HasIndex("RecordId", "ImageId");

                    b.ToTable("RecordImages");
                });

            modelBuilder.Entity("RiseDiary.Model.DiaryRecordTheme", b =>
                {
                    b.Property<Guid>("RecordId");

                    b.Property<Guid>("ThemeId");

                    b.Property<bool>("Deleted");

                    b.HasKey("RecordId", "ThemeId");

                    b.HasIndex("ThemeId");

                    b.HasIndex("RecordId", "ThemeId");

                    b.ToTable("RecordThemes");
                });

            modelBuilder.Entity("RiseDiary.Model.DiaryScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<string>("ScopeName");

                    b.HasKey("Id");

                    b.ToTable("Scopes");
                });

            modelBuilder.Entity("RiseDiary.Model.DiaryTheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Actual");

                    b.Property<bool>("Deleted");

                    b.Property<Guid>("ScopeId");

                    b.Property<string>("ThemeName");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("RiseDiary.Model.TempImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<int>("Height");

                    b.Property<string>("Modification");

                    b.Property<int>("SizeByte");

                    b.Property<Guid>("SourceImageId");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("SourceImageId")
                        .IsUnique();

                    b.ToTable("TempImages");
                });

            modelBuilder.Entity("RiseDiary.Model.Cogitation", b =>
                {
                    b.HasOne("RiseDiary.Model.DiaryRecord", "Record")
                        .WithMany("Cogitations")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiseDiary.Model.DiaryImageFull", b =>
                {
                    b.HasOne("RiseDiary.Model.DiaryImage", "DiaryImage")
                        .WithOne("FullImage")
                        .HasForeignKey("RiseDiary.Model.DiaryImageFull", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiseDiary.Model.DiaryRecordImage", b =>
                {
                    b.HasOne("RiseDiary.Model.DiaryImage", "Image")
                        .WithMany("RecordsRefs")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiseDiary.Model.DiaryRecord", "Record")
                        .WithMany("ImagesRefs")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiseDiary.Model.DiaryRecordTheme", b =>
                {
                    b.HasOne("RiseDiary.Model.DiaryRecord", "Record")
                        .WithMany("ThemesRefs")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiseDiary.Model.DiaryTheme", "Theme")
                        .WithMany("RecordsRefs")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiseDiary.Model.DiaryTheme", b =>
                {
                    b.HasOne("RiseDiary.Model.DiaryScope", "Scope")
                        .WithMany("Themes")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiseDiary.Model.TempImage", b =>
                {
                    b.HasOne("RiseDiary.Model.DiaryImage", "DiaryImage")
                        .WithOne("TempImage")
                        .HasForeignKey("RiseDiary.Model.TempImage", "SourceImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
