@using RiseDiary.Model
@namespace RiseDiary.WebUI.Pages

<div class="card">
    @if (CriticalError is not null)
    {
        <p style="color:red">Произошла критическая ошибка: @CriticalError</p>
    }
    else
    {
        <div id="@("fullImage-" + _image.Id.ToString())" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel" aria-hidden="true">
            <div class="modal-dialog @(_image.Width > _image.Height ? "modal-xl" : "modal-lg")">
                <div class="modal-content">

                    <div class="modal-header">
                        <i>@_image.Name</i>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body text-center">
                    </div>

                </div>
            </div>
        </div>

        @if (!OnlyImage)
        {
            <div class="card-header text-wrap text-center">
                <a href="/images/Edit?imageId=@(_image.Id.ToString())&recordId=@(RecordId?.ToString() ?? "")">@(_image.Name)</a>
            </div>
        }

        <div class="card-body">
            <div class="text-center">
                <a data-bs-toggle="modal" data-bs-target="@("#fullImage-" + _image.Id.ToString())"
                    style="cursor:pointer" onclick="loadImageOnThumbnailClick('@_image.Id.ToString()')">
                    <img src="/api/v1.0/image-thumbnail/@_image.Id" class="img-thumbnail" />
                </a>
            </div>
        </div>

        @if (!OnlyImage)
        {
            <div class="card-footer text-center">
                @if (ChildContent != null)
                {
                    @ChildContent
                }
                else
                {
                    @((Image?.Width ?? 0) + " / " + (Image?.Height ?? 0)) <b>@(Image?.GetSizeKbString() ?? "?")</b>
                }
            </div>
        }
    }
</div>

@code {

    private DiaryImage _image = null!;

    private string? CriticalError { get; set; }


    [Parameter]
    public DiaryImage Image
    {
        get => _image;
        set
        {
            try
            {
                _image = value ?? throw new ArgumentNullException("Image");
            }
            catch (Exception exc)
            {
                CriticalError = exc.Message;
            }
        }
    }

    [Parameter]
    public bool OnlyImage { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public Guid? RecordId { get; set; }
}
