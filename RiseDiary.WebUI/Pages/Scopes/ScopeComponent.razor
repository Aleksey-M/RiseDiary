@namespace RiseDiary.WebUI.Pages

@using RiseDiary.Model;

@inject IScopesService ScopesSvc
@inject IJSRuntime JSRuntime

<div class="panel panel-default">
    <div class="panel-heading">
        @if (ErrorMessage != null)
        {
<p style="color:red">@ErrorMessage</p>}
        @if (EditMode)
        {
<div>
    <div class="form form-horizontal">
        <div class="input-group">
            <input type="text" @bind-value="ScopeNewName" @bind-value:event="onchange" class="form-control" />
            <span class="input-group-btn">
                <input type="submit" class="btn btn-danger" value="Удалить" @onclick="TryRemoveScope" />
                <input type="submit" class="btn btn-success" value="Обновить" @onclick="UpdateScopeName" />
            </span>
        </div>
    </div>
</div> 
        }
else
{
<div>
    <table>
        <tbody>
            <tr>
                <td>
                    <h4 style="float:left">@Scope.ScopeName</h4>
                    &nbsp;
                    <button type="button" @onclick="ShowScopeNameEditField" class="btn btn-link">
                        <span class="glyphicon glyphicon-edit" aria-hidden="true"></span>
                    </button>
                </td>
            </tr>
        </tbody>
    </table>
</div>}
    </div>

    @if (Scope.Themes.Count() > 0)
    {
<div class="panel-body">
    <table class="table table-bordered">
        <tbody>
            @foreach (var th in Scope.Themes)
            {
@if (EditedThemeId != th.Id)
{
<tr>
    <td>
        <h5 style="float:left">@th.ThemeName</h5>
        <button type="button" @onclick="@(e => ToggleActuality(th.Id))" class="btn btn-default" style="float:right" title="Актуальность темы">
            <span class="glyphicon @(th.Actual ? "glyphicon-star" : "glyphicon-star-empty")" aria-hidden="true"></span>
        </button>
        <button type="button" @onclick="@(e => EditTheme(th.Id))" class="btn btn-default" style="float:right; margin-right:10px" title="Открыть на редактирование">
            <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
        </button>
    </td>
</tr>
 }
else
{
<tr>
    <td>
        @if (EditThemeErrorMessage != null)
        {
<p style="color:red">@EditThemeErrorMessage</p>}
        <div class="form form-horizontal">
            <div class="input-group">
                <input type="text" @bind-value="ThemeNewName" @bind-value:event="onchange" class="form-control" />
                <span class="input-group-btn">
                    <input type="button" @onclick="DeleteTheme" class="btn btn-danger" value="Удалить" />
                    <input type="button" @onclick="UpdateThemeName" class="btn btn-primary" value="Обновить" />
                </span>
            </div>
        </div>
    </td>
</tr>
}}
        </tbody>
    </table>

</div>}
    <div class="panel-footer">
        @if (CreateThemeErrorMessage != null)
        {
<p style="color:red">@CreateThemeErrorMessage</p>}
        <div class="form form-horizontal">
            <div class="input-group">
                <input type="text" @bind-value="NewThemeName" @bind-value:event="onchange" class="form-control" placeholder='Название новой темы для области "@Scope.ScopeName"' />
                <span class="input-group-btn">
                    <button type="button" class="btn btn-success" @onclick="CreateNewTheme">Создать</button>
                </span>
            </div>
        </div>
    </div>
</div>

@code{ 
    [Parameter] public DiaryScope Scope { get; set; } = null!;
    [Parameter] public Func<Task> UpdateParentState { get; set; } = null!;
    private List<DiaryTheme> Themes { get; set; } = new List<DiaryTheme>();

    private string? ErrorMessage { get; set; }
    private string? CreateThemeErrorMessage { get; set; }
    private string? EditThemeErrorMessage { get; set; }
    private string? NewThemeName { get; set; }
    private bool EditMode { get; set; }
    private string? ScopeNewName { get; set; }
    private Guid? EditedThemeId { get; set; }
    private string? ThemeNewName { get; set; }

    private void EditTheme(Guid themeId)
    {
        EditedThemeId = themeId;
        ThemeNewName = Scope.Themes.Single(t => t.Id == themeId).ThemeName;
        EditThemeErrorMessage = null;
    }

    private void ShowScopeNameEditField()
    {
        ScopeNewName = Scope.ScopeName;
        EditMode = true;
    }

    private async Task UpdateScopeName()
    {
        if (string.IsNullOrWhiteSpace(ScopeNewName))
        {
            ErrorMessage = "Нужно ввести новое название области интересов";
            return;
        }

        try
        {
            Scope.ScopeName = ScopeNewName.Trim();
            await ScopesSvc.UpdateScopeName(Scope.Id, Scope.ScopeName);
            EditMode = false;
            ErrorMessage = null;
        }
        catch(Exception exc)
        {
            ErrorMessage = exc.Message;
        }
    }

    private async Task UpdateThemeName()
    {
        if (EditedThemeId == null) return;

        if (string.IsNullOrWhiteSpace(ThemeNewName))
        {
            EditThemeErrorMessage = "Нужно ввести новое название темы";
            return;
        }

        if (Scope.Themes.Any(t => t.ThemeName.ToUpperInvariant() == ThemeNewName.ToUpperInvariant() && t.Id != EditedThemeId.Value))
        {
            EditThemeErrorMessage = $"Тема с названием '{ThemeNewName}' уже есть";
            return;
        }

        try
        {
            await ScopesSvc.UpdateTheme(EditedThemeId.Value, themeNewName: ThemeNewName);
            Scope.Themes.Single(t => t.Id == EditedThemeId.Value).ThemeName = ThemeNewName;
            ThemeNewName = null;
            EditThemeErrorMessage = null;
            EditedThemeId = null;
        }
        catch(Exception exc)
        {
            ErrorMessage = exc.Message;
        }
    }

    private async Task DeleteTheme()
    {
        if (EditedThemeId == null) return;
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Удалить тему?"))
        {
            await ScopesSvc.DeleteTheme(EditedThemeId.Value);
            EditedThemeId = null;
            EditThemeErrorMessage = null;
            Scope = await ScopesSvc.FetchScopeById(Scope.Id);
            this.StateHasChanged();
        }
    }

    private async Task TryRemoveScope()
    {
        if (await ScopesSvc.CanDeleteScope(Scope.Id))
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Удалить сферу интересов?"))
            {
                await ScopesSvc.DeleteScope(Scope.Id);
                await UpdateParentState();
            }
        }
        else
        {
            ErrorMessage = "Область не может быть удалена. Есть связанные темы";
        }
    }

    private async Task CreateNewTheme()
    {
        if (string.IsNullOrWhiteSpace(NewThemeName))
        {
            CreateThemeErrorMessage = "Нужно ввести название новой темы";
            return;
        }

        if (Scope.Themes.Any(t => t.ThemeName.ToUpperInvariant() == NewThemeName.ToUpperInvariant()))
        {
            CreateThemeErrorMessage = $"Тема с названием '{NewThemeName}' уже есть";
            return;
        }

        try
        {
            await ScopesSvc.AddTheme(Scope.Id, NewThemeName, true);
            NewThemeName = null;
            CreateThemeErrorMessage = null;
            Scope = await ScopesSvc.FetchScopeById(Scope.Id);
        }
        catch(Exception exc)
        {
            ErrorMessage = exc.Message;
        }
    }

    public async Task ToggleActuality(Guid themeId)
    {
        var theme = Scope.Themes.Single(t => t.Id == themeId);
        await ScopesSvc.UpdateTheme(theme.Id, themeActuality: !theme.Actual);
        Scope = await ScopesSvc.FetchScopeById(Scope.Id);
    } 
}