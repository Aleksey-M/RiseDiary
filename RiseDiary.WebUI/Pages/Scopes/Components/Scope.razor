@using RiseDiary.Model;

@namespace RiseDiary.WebUI.Pages.Scopes

@inject IScopesService ScopesSvc
@inject IJSRuntime JSRuntime

@if (CriticalError is not null)
{
    <p style="color:red">Произошла критическая ошибка: @CriticalError</p>
}
else
{
    <div class="card mt-3">
        <div class="card-header">
            @if (ErrorMessage != null)
            {
                <p style="color:red">@ErrorMessage</p>
            }

            @if (EditMode)
            {
                <div class="input-group">
                    <input type="text" @bind-value="ScopeNewName" @bind-value:event="onchange" class="form-control" />

                    <button type="submit" class="btn btn-link" @onclick="TryRemoveScope">
                        <img src="img/trash.svg" width="20" height="20" alt="Удалить" title="Удалить" />
                    </button>

                    <button type="submit" class="btn btn-link" @onclick="UpdateScopeName">
                        <img src="img/check2-square.svg" widtn="20" height="20" title="Обновить" alt="Обновить" />
                    </button>
                </div>
            }
            else
            {
                <div class="row">
                    <h5 class="col-11 mt-1" style="color:blue">@CurrentScope.ScopeName</h5>

                    <button type="button" @onclick="ShowScopeNameEditField" class="btn btn-link col-1">
                        <img src="img/pencil-square.svg" widtn="20" height="20" title="Изменить" alt="Изменить" />
                    </button>
                </div>
            }
        </div>

        @if (CurrentScope.Themes.Count() > 0)
        {
            <ul class="list-group list-group-flush">
                @foreach (var th in CurrentScope.Themes)
                {
                    <li class="list-group-item">
                        <div class="row">
                            @if (EditedThemeId != th.Id)
                            {
                                <div class="col-lg-10 col-md-8 col-sm-12">
                                    <h5>@th.ThemeName</h5>
                                </div>

                                <div class="col-lg-1 col-md-2 col-sm-6 text-center">
                                    <button type="button" @onclick="@(e => ToggleActuality(th.Id))" class="btn btn-link" title="Актуальность темы">
                                        @if (th.Actual)
                                        {
                                            <img src="img/star-fill.svg" widtn="20" height="20" />
                                        }
                                        else
                                        {
                                            <img src="img/star.svg" widtn="20" height="20" />
                                        }
                                    </button>
                                </div>

                                <div class="col-lg-1 col-md-2 col-sm-6 text-center">
                                    <button type="button" @onclick="@(e => EditTheme(th.Id))" class="btn btn-link" title="Открыть на редактирование">
                                        <img src="img/pencil-square.svg" widtn="20" height="20" />
                                    </button>
                                </div>
                            }
                            else
                            {
                                @if (EditThemeErrorMessage != null)
                                {
                                    <p style="color:red" class="col-12">@EditThemeErrorMessage</p>
                                }

                                <div class="input-group">
                                    <input type="text" @bind-value="ThemeNewName" @bind-value:event="onchange" class="form-control" />

                                    <button type="button" @onclick="DeleteTheme" class="btn btn-link">
                                        <img src="img/trash.svg" width="20" height="20" alt="Удалить" title="Удалить" />
                                    </button>

                                    <button type="button" @onclick="UpdateThemeName" class="btn btn-link">
                                        <img src="img/check2-square.svg" widtn="20" height="20" title="Обновить" alt="Обновить" />
                                    </button>
                                </div>
                            }
                        </div>
                    </li>
                }
            </ul>
        }

        <div class="card-footer">

            @if (CreateThemeErrorMessage != null)
            {
                <p style="color:red">@CreateThemeErrorMessage</p>
            }

            <div class="input-group">
                <input type="text" @bind-value="NewThemeName" @bind-value:event="onchange" class="form-control" placeholder='Название новой темы для области "@CurrentScope.ScopeName"' />

                <button type="button" class="btn btn-link" @onclick="CreateNewTheme">
                    <img src="img/plus-square.svg" widtn="20" height="20" title="Создать" alt="Создать" />
                </button>
            </div>
        </div>
    </div>
}

@code{

    [Parameter] 
    public DiaryScope CurrentScope { get; set; } = null!;

    [Parameter] 
    public Func<Task> UpdateParentState { get; set; } = null!;

    private List<DiaryTheme> Themes { get; set; } = new List<DiaryTheme>();

    private string? ErrorMessage { get; set; }

    private string? CreateThemeErrorMessage { get; set; }

    private string? EditThemeErrorMessage { get; set; }

    private string? NewThemeName { get; set; }

    private bool EditMode { get; set; }

    private string? ScopeNewName { get; set; }

    private Guid? EditedThemeId { get; set; }

    private string? ThemeNewName { get; set; }

    private string? CriticalError { get; set; }


    private void HandleCriticalError(Exception exc)
    {
        CriticalError = exc.Message;
        Themes = new List<DiaryTheme>();
    }

    private void EditTheme(Guid themeId)
    {
        try
        {
            EditedThemeId = themeId;
            ThemeNewName = CurrentScope.Themes.Single(t => t.Id == themeId).ThemeName;
            EditThemeErrorMessage = null;
        }
        catch (Exception exc)
        {
            HandleCriticalError(exc);
        }
    }

    private void ShowScopeNameEditField()
    {
        try
        {
            ScopeNewName = CurrentScope.ScopeName;
            EditMode = true;
        }
        catch(Exception exc)
        {
            HandleCriticalError(exc);
        }       
    }

    private async Task UpdateScopeName()
    {
        if (string.IsNullOrWhiteSpace(ScopeNewName))
        {
            ErrorMessage = "Нужно ввести новое название области интересов";
            return;
        }

        try
        {
            CurrentScope.ScopeName = ScopeNewName.Trim();
            await ScopesSvc.UpdateScopeName(CurrentScope.Id, CurrentScope.ScopeName);
            EditMode = false;
            ErrorMessage = null;
        }
        catch(Exception exc)
        {
            ErrorMessage = exc.Message;
        }
    }

    private async Task UpdateThemeName()
    {
        if (EditedThemeId == null) return;

        if (string.IsNullOrWhiteSpace(ThemeNewName))
        {
            EditThemeErrorMessage = "Нужно ввести новое название темы";
            return;
        }

        if (CurrentScope.Themes.Any(t => t.ThemeName.ToUpperInvariant() == ThemeNewName.ToUpperInvariant() && t.Id != EditedThemeId.Value))
        {
            EditThemeErrorMessage = $"Тема с названием '{ThemeNewName}' уже есть";
            return;
        }

        try
        {
            await ScopesSvc.UpdateTheme(EditedThemeId.Value, themeNewName: ThemeNewName);
            CurrentScope.Themes.Single(t => t.Id == EditedThemeId.Value).ThemeName = ThemeNewName;
            ThemeNewName = null;
            EditThemeErrorMessage = null;
            EditedThemeId = null;
        }
        catch(Exception exc)
        {
            ErrorMessage = exc.Message;
        }
    }

    private async Task DeleteTheme()
    {
        try
        {
            if (EditedThemeId == null) return;

            if (await JSRuntime.InvokeAsync<bool>("confirm", "Удалить тему?"))
            {
                await ScopesSvc.DeleteTheme(EditedThemeId.Value);
                EditedThemeId = null;
                EditThemeErrorMessage = null;
                CurrentScope = await ScopesSvc.FetchScopeById(CurrentScope.Id) 
                    ?? throw new Exception($"Error on getting Scope with Id = '{CurrentScope.Id}'");

                this.StateHasChanged();
            }
        }
        catch (Exception exc)
        {
            HandleCriticalError(exc);
        }
    }

    private async Task TryRemoveScope()
    {
        try
        {
            if (await ScopesSvc.CanDeleteScope(CurrentScope.Id))
            {
                if (await JSRuntime.InvokeAsync<bool>("confirm", "Удалить сферу интересов?"))
                {
                    await ScopesSvc.DeleteScope(CurrentScope.Id);
                    await UpdateParentState();
                }
            }
            else
            {
                ErrorMessage = "Область не может быть удалена. Есть связанные темы";
            }
        }
        catch (Exception exc)
        {
            HandleCriticalError(exc);
        }
    }

    private async Task CreateNewTheme()
    {
        if (string.IsNullOrWhiteSpace(NewThemeName))
        {
            CreateThemeErrorMessage = "Нужно ввести название новой темы";
            return;
        }

        if (CurrentScope.Themes.Any(t => t.ThemeName.ToUpperInvariant() == NewThemeName.ToUpperInvariant()))
        {
            CreateThemeErrorMessage = $"Тема с названием '{NewThemeName}' уже есть";
            return;
        }

        try
        {
            await ScopesSvc.AddTheme(CurrentScope.Id, NewThemeName, true);
            NewThemeName = null;
            CreateThemeErrorMessage = null;
            CurrentScope = await ScopesSvc.FetchScopeById(CurrentScope.Id) 
                ?? throw new Exception($"Error on getting Scope with Id = '{CurrentScope.Id}'");
        }
        catch(Exception exc)
        {
            ErrorMessage = exc.Message;
        }
    }

    public async Task ToggleActuality(Guid themeId)
    {
        try
        {
            var theme = CurrentScope.Themes.Single(t => t.Id == themeId);
            await ScopesSvc.UpdateTheme(theme.Id, themeActuality: !theme.Actual);
            CurrentScope = await ScopesSvc.FetchScopeById(CurrentScope.Id) 
                ?? throw new Exception($"Error on getting Scope with Id = '{CurrentScope.Id}'");
        }
        catch(Exception exc)
        {
            HandleCriticalError(exc);
        }       
    }
}