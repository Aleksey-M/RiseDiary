@using RiseDiary.Model;

@namespace RiseDiary.WebUI.Pages.Scopes

@inject IScopesService ScopesSvc
@inject IJSRuntime JSRuntime

<div class="card mt-3">
    <div class="card-header">
        @if (ErrorMessage != null)
        {
            <p style="color:red">@ErrorMessage</p>
        }

        @if (EditMode)
        {
             <div class="input-group">
                 <input type="text" @bind-value="ScopeNewName" @bind-value:event="onchange" class="form-control" />
                 <button type="submit" class="btn btn-outline-danger input-group-btn" title="Удалить" @onclick="TryRemoveScope">
                     <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                         <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                         <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                     </svg>
                 </button>
                 <button type="submit" class="btn btn-outline-success input-group-btn" title="Обновить" @onclick="UpdateScopeName">
                     <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-check" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                         <path fill-rule="evenodd" d="M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.236.236 0 0 1 .02-.022z" />
                     </svg>
                 </button>
             </div>
        }
        else
        {
        <div class="row">
            <h5 class="col-11 mt-1" style="color:blue">@CurrentScope.ScopeName</h5>                            
            <button type="button" @onclick="ShowScopeNameEditField" class="btn btn-link col-1">
                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-pencil" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5L13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175l-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z" />
                </svg>
            </button>
        </div>
        }
    </div>
        
    @if (CurrentScope.Themes.Count() > 0)
    {
        <ul class="list-group list-group-flush">
             @foreach (var th in CurrentScope.Themes)
             {
                    <li class="list-group-item">
                        <div class="row">
                        @if (EditedThemeId != th.Id)
                        {
                            <div class="col-10">
                                <h5>@th.ThemeName</h5>
                            </div>
                            <div class="col-1">
                                <button type="button" @onclick="@(e => ToggleActuality(th.Id))" class="btn btn-default" style="float:right; margin-right:15px" title="Актуальность темы">
                                    @if (th.Actual)
                                    {
                                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-star-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-star" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                            <path fill-rule="evenodd" d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z" />
                                        </svg>
                                    }
                                </button>
                            </div>
                            <div class="col-1">
                                <button type="button" @onclick="@(e => EditTheme(th.Id))" class="btn btn-default" style="float:right; margin-right:5px" title="Открыть на редактирование">
                                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-pencil" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5L13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175l-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z" />
                                    </svg>
                                </button>
                            </div>
                        }
                        else
                        {
                           @if (EditThemeErrorMessage != null)
                           {
                            <p style="color:red" class="col-12">@EditThemeErrorMessage</p>
                           }
                           <div class="input-group">
                               <input type="text" @bind-value="ThemeNewName" @bind-value:event="onchange" class="form-control" />
                               <button type="button" @onclick="DeleteTheme" class="btn btn-outline-danger input-group-btn" title="Удалить">
                                   <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                       <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                       <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                   </svg>    
                               </button>
                               <button type="button" @onclick="UpdateThemeName" class="btn btn-outline-primary input-group-btn" title="Обновить">
                                   <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-check" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                       <path fill-rule="evenodd" d="M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.236.236 0 0 1 .02-.022z" />
                                   </svg>
                               </button>
                           </div>
                        }
                            </div>
                    </li>
             }
        </ul>
    }
    <div class="card-footer">
        @if (CreateThemeErrorMessage != null)
        {
            <p style="color:red">@CreateThemeErrorMessage</p>
        }
        <div class="input-group">
            <input type="text" @bind-value="NewThemeName" @bind-value:event="onchange" class="form-control" placeholder='Название новой темы для области "@CurrentScope.ScopeName"' />
            <button type="button" class="btn btn-outline-success input-group-btn" @onclick="CreateNewTheme" title="Создать">
                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-plus" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                </svg>
            </button>
        </div>
    </div>
</div>

@code{ 
    [Parameter] public DiaryScope CurrentScope { get; set; } = null!;
    [Parameter] public Func<Task> UpdateParentState { get; set; } = null!;
    private List<DiaryTheme> Themes { get; set; } = new List<DiaryTheme>();

    private string? ErrorMessage { get; set; }
    private string? CreateThemeErrorMessage { get; set; }
    private string? EditThemeErrorMessage { get; set; }
    private string? NewThemeName { get; set; }
    private bool EditMode { get; set; }
    private string? ScopeNewName { get; set; }
    private Guid? EditedThemeId { get; set; }
    private string? ThemeNewName { get; set; }

    private void EditTheme(Guid themeId)
    {
        EditedThemeId = themeId;
        ThemeNewName = CurrentScope.Themes.Single(t => t.Id == themeId).ThemeName;
        EditThemeErrorMessage = null;
    }

    private void ShowScopeNameEditField()
    {
        ScopeNewName = CurrentScope.ScopeName;
        EditMode = true;
    }

    private async Task UpdateScopeName()
    {
        if (string.IsNullOrWhiteSpace(ScopeNewName))
        {
            ErrorMessage = "Нужно ввести новое название области интересов";
            return;
        }

        try
        {
            CurrentScope.ScopeName = ScopeNewName.Trim();
            await ScopesSvc.UpdateScopeName(CurrentScope.Id, CurrentScope.ScopeName);
            EditMode = false;
            ErrorMessage = null;
        }
        catch(Exception exc)
        {
            ErrorMessage = exc.Message;
        }
    }

    private async Task UpdateThemeName()
    {
        if (EditedThemeId == null) return;

        if (string.IsNullOrWhiteSpace(ThemeNewName))
        {
            EditThemeErrorMessage = "Нужно ввести новое название темы";
            return;
        }

        if (CurrentScope.Themes.Any(t => t.ThemeName.ToUpperInvariant() == ThemeNewName.ToUpperInvariant() && t.Id != EditedThemeId.Value))
        {
            EditThemeErrorMessage = $"Тема с названием '{ThemeNewName}' уже есть";
            return;
        }

        try
        {
            await ScopesSvc.UpdateTheme(EditedThemeId.Value, themeNewName: ThemeNewName);
            CurrentScope.Themes.Single(t => t.Id == EditedThemeId.Value).ThemeName = ThemeNewName;
            ThemeNewName = null;
            EditThemeErrorMessage = null;
            EditedThemeId = null;
        }
        catch(Exception exc)
        {
            ErrorMessage = exc.Message;
        }
    }

    private async Task DeleteTheme()
    {
        if (EditedThemeId == null) return;
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Удалить тему?"))
        {
            await ScopesSvc.DeleteTheme(EditedThemeId.Value);
            EditedThemeId = null;
            EditThemeErrorMessage = null;
            CurrentScope = await ScopesSvc.FetchScopeById(CurrentScope.Id);
            this.StateHasChanged();
        }
    }

    private async Task TryRemoveScope()
    {
        if (await ScopesSvc.CanDeleteScope(CurrentScope.Id))
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Удалить сферу интересов?"))
            {
                await ScopesSvc.DeleteScope(CurrentScope.Id);
                await UpdateParentState();
            }
        }
        else
        {
            ErrorMessage = "Область не может быть удалена. Есть связанные темы";
        }
    }

    private async Task CreateNewTheme()
    {
        if (string.IsNullOrWhiteSpace(NewThemeName))
        {
            CreateThemeErrorMessage = "Нужно ввести название новой темы";
            return;
        }

        if (CurrentScope.Themes.Any(t => t.ThemeName.ToUpperInvariant() == NewThemeName.ToUpperInvariant()))
        {
            CreateThemeErrorMessage = $"Тема с названием '{NewThemeName}' уже есть";
            return;
        }

        try
        {
            await ScopesSvc.AddTheme(CurrentScope.Id, NewThemeName, true);
            NewThemeName = null;
            CreateThemeErrorMessage = null;
            CurrentScope = await ScopesSvc.FetchScopeById(CurrentScope.Id);
        }
        catch(Exception exc)
        {
            ErrorMessage = exc.Message;
        }
    }

    public async Task ToggleActuality(Guid themeId)
    {
        var theme = CurrentScope.Themes.Single(t => t.Id == themeId);
        await ScopesSvc.UpdateTheme(theme.Id, themeActuality: !theme.Actual);
        CurrentScope = await ScopesSvc.FetchScopeById(CurrentScope.Id);
    }
}