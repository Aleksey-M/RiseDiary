@using RiseDiary.Model;

@namespace RiseDiary.WebUI.Pages.Scopes

@inject IScopesService ScopesSvc

<div class="card">
    <div class="card-header">
        @if (!string.IsNullOrWhiteSpace(ErrorMessage))
        {
        <p style="color:red;">@ErrorMessage</p>}
        <div class="input-group">
            <input type="text" @bind-value="NewScopeName" @bind-value:event="onchange" class="form-control" placeholder="Введите название новой области интересов" />
            
            <button type="button" @onclick="CreateNewScope" class="btn btn-link" >
                <img src="img/plus-square.svg" width="20" height="20" title="Создать" alt="Создать" />
            </button>
        </div>
    </div>
</div>

<div>
    @foreach (var sc in Scopes)
    {
        <Scope CurrentScope="sc" UpdateParentState="UpdateState" @key="sc"></Scope>
    }
</div>

@code{ 
    
    private List<DiaryScope> Scopes { get; set; } = null!;
    private string? NewScopeName { get; set; }
    private string? ErrorMessage { get; set; }

    private async Task CreateNewScope()
    {
        if (string.IsNullOrWhiteSpace(NewScopeName))
        {
            ErrorMessage = "Название области не введено";
        }
        else
        {
            try
            {
                await ScopesSvc.AddScope(NewScopeName.Trim());
                NewScopeName = null;
                Scopes = await ScopesSvc.GetScopes();
                ErrorMessage = null;
            }
            catch (Exception exc)
            {
                ErrorMessage = exc.Message;
            }
        }
    }

    private async Task UpdateState()
    {
        Scopes = await ScopesSvc.GetScopes();
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Scopes = await ScopesSvc.GetScopes();
    } 
}