@using RiseDiary.Model

@namespace RiseDiary.WebUI.Pages.Images

@inject IImagesService ImagesService

@if (CriticalError is not null)
{
    <p style="color:red">Произошла критическая ошибка: @CriticalError</p>
}
else
{
    @if (EditMode)
    {
        @if (ErrorMessage != null)
        {
            <p style="color:red">@ErrorMessage</p>
        }

        <div>
            <div class="form form-horizontal">
                <div class="input-group">
                    <input type="text" class="form-control" @bind-value="CurrentImageName" @bind-value:event="onchange" />

                    <button type="button" class="btn btn-link" @onclick="SaveImageName">
                        <img src="img/check2-square.svg" widtn="20" height="20" title="Сохранить название" alt="Сохранить название" />
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div>
            <span>@CurrentImageName</span>

            <button type="button" class="btn btn-link" @onclick="ToEditMode">
                <img src="img/pencil-square.svg" widtn="20" height="20" title="Изменить" alt="Изменить" />
            </button>
        </div>
    }
}

@code{

    [Parameter]
    public string CurrentImageName { get; set; } = null!;

    [Parameter]
    public Guid ImageId { get; set; }

    public bool EditMode { get; set; }

    public string? ErrorMessage { get; set; }

    private string? CriticalError { get; set; }


    public void ToEditMode()
    {
        EditMode = true;
    }

    public async Task SaveImageName()
    {
        try
        {
            var imageName = CurrentImageName.Trim();

            if (imageName.Length == 0)
            {
                ErrorMessage = "Новое название не введено!";
                return;
            }

            if (imageName.Length > 250)
            {
                ErrorMessage = "Длина названия не должна превышать 250 символов";
                return;
            }

            await ImagesService.UpdateImage(ImageId, imageName).ConfigureAwait(false);
            CurrentImageName = imageName;
            ErrorMessage = null;
            EditMode = false;
        }
        catch(Exception exc)
        {
            CriticalError = exc.Message;
        }
        
    }

}
