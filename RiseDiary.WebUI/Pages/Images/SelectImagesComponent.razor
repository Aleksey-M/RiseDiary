@using RiseDiary.Model

@namespace RiseDiary.WebUI.Pages.Images

@inject IImagesService ImagesService
@inject IRecordsImagesService RecordsImagesService
@inject IJSRuntime JSRuntime

<table class="table table-striped">
    <thead>
        <tr>
            <th style="width:200px;"></th>
            <th>Название</th>
            <th>Добавлено</th>
            <th>Изменено</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var img in Images)
        {
<tr>
    <td style="white-space: nowrap">
        <label>
            <input disabled="@Disabled" type="checkbox" id="@img.Id" style="vertical-align:middle" checked="@(CheckedAttribute(img.Id))" @onchange="@(e => ToggleSelection(img.Id))" />
            <img src="/api/v1.0/image-thumbnail/@img.Id" style="vertical-align:middle" />
        </label>
    </td>
    <td>@img.Name</td>
    <td>@img.CreateDate.ToString("yyyy.MM.dd HH:mm:ss")</td>
    <td>@img.ModifyDate.ToString("yyyy.MM.dd HH:mm:ss")</td>
</tr>}
    </tbody>
    <tfoot>
        <tr>
            <td colspan="4" style="text-align:center">
                @if (HiddenImagesExists())
                {
    <button disabled="@Disabled" type="button" @onclick="@(async e => await LoadListPart())" class="btn btn-link">Показать еще <span class="glyphicon glyphicon-refresh"></span></button>}
            </td>
        </tr>
        <tr>
            <td colspan="4">
                <a disabled="@Disabled" href="Records/View?recordId=@RecordId" class="btn btn-default">вернуться к записи</a>&nbsp;&nbsp;
                <button disabled="@Disabled" type="button" class="btn btn-success" @onclick="@(async e => await Save())">Сохранить</button>
            </td>
        </tr>
    </tfoot>
</table>


@code{

    [Parameter]
    public Guid RecordId { get; set; }

    private List<DiaryImage> Images { get; set; } = new List<DiaryImage>();
    private int AllImagesCount { get; set; }
    private HashSet<Guid> RecordImages { get; set; } = null!;
    public bool Disabled { get; set; }

    private async Task LoadListPart()
    {
        int nextCount = 15;
        if (Images.Count + 15 > AllImagesCount)
        {
            nextCount = AllImagesCount - Images.Count;
        }

        var newImages = await ImagesService.FetchImageSet(Images.Count, nextCount).ConfigureAwait(false);
        Images.AddRange(newImages);
    }

    private async Task Save()
    {
        Disabled = true;

        var addedImages = new HashSet<Guid>(await RecordsImagesService.GetLinkedImagesIdList(RecordId).ConfigureAwait(false));

        var deleted = addedImages.Except(RecordImages);
        foreach (var id in deleted)
        {
            await RecordsImagesService.RemoveRecordImage(RecordId, id).ConfigureAwait(false);
        }

        var added = RecordImages.Except(addedImages);
        foreach (var id in added)
        {
            await RecordsImagesService.AddRecordImage(RecordId, id).ConfigureAwait(false);
        }

        await JSRuntime.InvokeVoidAsync("showSaveMessage");

        Disabled = false;
    }

    private bool CheckedAttribute(Guid imgId) => RecordImages.Any(id => id == imgId);

    private bool HiddenImagesExists() => AllImagesCount != Images.Count;

    private void ToggleSelection(Guid id)
    {
        if (RecordImages.Contains(id))
        {
            RecordImages.Remove(id);
        }
        else
        {
            RecordImages.Add(id);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        RecordImages = new HashSet<Guid>(await RecordsImagesService.GetLinkedImagesIdList(RecordId).ConfigureAwait(false));

        AllImagesCount = await ImagesService.GetImagesCount().ConfigureAwait(false);
        await LoadListPart().ConfigureAwait(false);
    }

 }