@using RiseDiary.Model
@using RiseDiary.Shared

@namespace RiseDiary.WebUI.Pages.Records

@inject IAppSettingsService SettingsSvc

@if (StartRecordId == null)
{
    <button type="button" @onclick="@(e => SetOnStartPage())" class="btn btn-link pt-0" style="float:right" title="Поместить на стартовую страницу">
        <img src="img/calendar-plus.svg" />
    </button> 
}
else if (RecordId == StartRecordId)
{
    <button type="button" @onclick="@(e => RemoveFromStartPage())" class="btn btn-link pt-0" style="float:right" title="Удалить со стартовой страницы">
        <img src="img/calendar-x.svg" />
    </button> 
}
else
{
    <button type="button" @onclick="@(e => SetOnStartPage())" class="btn btn-link pt-0" style="float:right" title="Заменить другую запись на стартовой странице">
        <img src="img/calendar-check.svg" />
    </button>
}

@code{ 

    [Parameter]
    public Guid RecordId { get; set; }

    private Guid? StartRecordId { get; set; }
    
    private async Task SetOnStartPage()
    {
        await SettingsSvc.UpdateAppSetting(AppSettingsKey.StartPageRecordId, RecordId.ToString()).ConfigureAwait(false);
        await ReadStartPageId().ConfigureAwait(false);
    }

    private async Task RemoveFromStartPage()
    {
        await SettingsSvc.UpdateAppSetting(AppSettingsKey.StartPageRecordId, "").ConfigureAwait(false);
        StartRecordId = null;
        await ReadStartPageId().ConfigureAwait(false);
    }

    private async Task ReadStartPageId()
    {
        var s = (await SettingsSvc.GetAppSetting(AppSettingsKey.StartPageRecordId).ConfigureAwait(false)).value ?? "";
        if (Guid.TryParse(s, out var id))
        {
            StartRecordId = id;
        }
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        await ReadStartPageId().ConfigureAwait(false);
    } 
}
