@using RiseDiary.Model
@using RiseDiary.Shared

@namespace RiseDiary.WebUI.Pages.Records

@inject IAppSettingsService SettingsSvc

@if (_criticalError is not null)
{
    <p style="color:red">Произошла критическая ошибка: @_criticalError</p>
}
else
{
    @if (_startRecordId == null)
    {
        <button type="button" @onclick="@(e => SetOnStartPage())" class="btn btn-link pt-0" style="float:right" title="Поместить на стартовую страницу">
            <img src="img/calendar-plus.svg" />
        </button>
    }
    else if (RecordId == _startRecordId)
    {
        <button type="button" @onclick="@(e => RemoveFromStartPage())" class="btn btn-link pt-0" style="float:right" title="Удалить со стартовой страницы">
            <img src="img/calendar-x.svg" />
        </button>
    }
    else
    {
        <button type="button" @onclick="@(e => SetOnStartPage())" class="btn btn-link pt-0" style="float:right" title="Заменить другую запись на стартовой странице">
            <img src="img/calendar-check.svg" />
        </button>
    }
}

@code{

    [Parameter]
    public Guid RecordId { get; set; }

    private Guid? _startRecordId;

    private string? _criticalError;


    private async Task SetOnStartPage()
    {
        try
        {
            await SettingsSvc.UpdateAppSetting(AppSettingsKey.StartPageRecordId, RecordId.ToString()).ConfigureAwait(false);
            await ReadStartPageId().ConfigureAwait(false);
        }
        catch(Exception exc)
        {
            _criticalError = exc.Message;
        }
    }

    private async Task RemoveFromStartPage()
    {
        try
        {
            await SettingsSvc.UpdateAppSetting(AppSettingsKey.StartPageRecordId, "").ConfigureAwait(false);
            _startRecordId = null;
            await ReadStartPageId().ConfigureAwait(false);
        }
        catch (Exception exc)
        {
            _criticalError = exc.Message;
        }
    }

    private async Task ReadStartPageId()
    {
        var s = (await SettingsSvc.GetAppSetting(AppSettingsKey.StartPageRecordId).ConfigureAwait(false)).value ?? "";

        if (Guid.TryParse(s, out var id))
        {
            _startRecordId = id;
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReadStartPageId().ConfigureAwait(false);
        }
        catch(Exception exc)
        {
            _criticalError = exc.Message;
        }    
    } 
}
