@using Blazored.TextEditor

@namespace RiseDiary.WebUI.Pages.Records

@inject IJSRuntime jsRuntime

@if (CriticalError is not null)
{
    <p style="color:red">Произошла критическая ошибка: @CriticalError</p>
}
else
{
    <div class="row py-2">
        @if (_editorMode == EditorMode.RichTextEdit)
        {
            <div class="col-12">
                <div id="@_editorId" style="border: 1px solid black; overflow: auto; resize: vertical">
                    <ErrorBoundary>
                        <BlazoredTextEditor @ref="@QuillHtml">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <select class="ql-font"></select>
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                    <button class="ql-indent" value="-1"></button>
                                    <button class="ql-indent" value="+1"></button>
                                    <select class="ql-align ql-picker ql-icon-picker"></select>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-script" value="sub"></button>
                                    <button class="ql-script" value="super"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                    <button class="ql-image"></button>
                                    <button class="ql-video"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>

                            </EditorContent>
                        </BlazoredTextEditor>
                    </ErrorBoundary>
                </div>
            </div>

            <div class="col-12">
                <button type="button" class="btn btn-outline-success btn-sm m-1" title="Сохранить текст" @onclick="_ => SaveChangedText()">
                    Сохранить
                </button>
                <button type="button" class="btn btn-outline-secondary btn-sm m-1" title="Закрыть без сохранения" @onclick="_ => SwitchMode()">
                    Закрыть
                </button>
            </div>
        }
        else if (_editorMode == EditorMode.HTMLEdit)
        {
            <div class="col-12">
                <div id="html-@_editorId" style="border:1px solid silver;overflow: auto; resize: vertical" contenteditable="true">@Text</div>
            </div>

            <div class="col-12">
                <button type="button" class="btn btn-outline-success btn-sm m-1" title="Сохранить текст" @onclick="_ => SaveChangedText()">
                    Сохранить
                </button>
                <button type="button" class="btn btn-outline-secondary btn-sm m-1" title="Закрыть без сохранения" @onclick="_ => SwitchMode()">
                    Закрыть
                </button>
            </div>
        }
        else
        {
            <div class="col-12 m-2">
                @ViewText
            </div>

            <div class="col-12">
                <button type="button" class="btn btn-outline-info btn-sm m-1" title="Редактировать текст" @onclick="_ => SwitchMode()">
                    Редактировать
                </button>
                <button type="button" class="btn btn-outline-secondary btn-sm m-1" title="Редактировать HTML" @onclick="_ => OpenHTML()">
                    Редактировать HTML
                </button>
            </div>
        }
    </div>
}

@code {

    private enum EditorMode { View, RichTextEdit, HTMLEdit }

    [Parameter]
    public string Text { get; set; } = "";

    [Parameter]
    public Func<string, Task>? SaveText { get; set; }

    private MarkupString ViewText => new MarkupString(Text);

    private EditorMode _editorMode = EditorMode.View;

    private string _editorId = "id-" + Guid.NewGuid().ToString();

    BlazoredTextEditor QuillHtml = null!;

    private string? CriticalError { get; set; }

    private void SwitchMode()
    {
        _editorMode = (_editorMode) switch
        {
            EditorMode.View => EditorMode.RichTextEdit,
            EditorMode.RichTextEdit => EditorMode.View ,
            EditorMode.HTMLEdit => EditorMode.View,
            _ => EditorMode.View
        };
    }

    private void OpenHTML()
    {
        _editorMode = EditorMode.HTMLEdit;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        try
        {
            if (!firstRender && _editorMode == EditorMode.RichTextEdit)
            {
                await jsRuntime.InvokeVoidAsync("setQuillHtmlText", Text, _editorId);
            }
        }
        catch (Exception exc)
        {
            CriticalError = exc.Message;
        }
    }

    private async Task SaveChangedText()
    {
        try
        {
            SaveText = SaveText ?? (_ => Task.CompletedTask);
            string html = "";

            if (_editorMode == EditorMode.RichTextEdit)
            {
                var text = await QuillHtml.GetText();
                text = text.Trim() ?? "";

                if (text == "")
                {
                    await jsRuntime.InvokeVoidAsync("alert", "Текст не введен");
                    return;
                }

                html = await QuillHtml.GetHTML();
            }
            else
            {
                html = await jsRuntime.InvokeAsync<string>("getHtmlText", "html-" + _editorId);
                html = html.Trim() ?? "";

                if (html == "")
                {
                    await jsRuntime.InvokeVoidAsync("alert", "Текст не введен");
                    return;
                }
            }

            await SaveText(html);
            Text = html;
            _editorMode = EditorMode.View;
        }
        catch (Exception exc)
        {
            CriticalError = exc.Message;
        }
    }

}
