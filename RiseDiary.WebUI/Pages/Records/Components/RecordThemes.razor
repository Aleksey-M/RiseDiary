@using RiseDiary.Model

@namespace RiseDiary.WebUI.Pages.Records

@inject IJSRuntime _JSRuntime

@if (CriticalError is not null)
{
    <p style="color:red">Произошла критическая ошибка: @CriticalError</p>
}
else
{
    <div>
        <h6 style="display:inline"><i>@AllThemes</i></h6>

        <button type="button" class="btn btn-link p-0" title="Фильтр по темам" data-bs-toggle="modal" data-bs-target="#themesFilter">
            <img src="img/pen.svg" />
        </button>
    </div>
}

<div style="text-align:left" class="modal fade" id="themesFilter" tabindex="-1" aria-labelledby="themesFilterLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">

                <h5 class="modal-title" id="exampleModalLabel">Фильтр по темам</h5>

                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>
                    <h6>Актуальные темы</h6>
                    <ul>
                        @foreach (var scope in AllScopes)
                        {
                            @if (scope.Themes.Count(t => t.Actual) > 0)
                            {
                                <li>
                                    <h6 style="color:blue">@scope.ScopeName</h6>
                                    <ul>
                                        @foreach (var theme in scope.Themes.Where(t => t.Actual))
                                        {
                                            <li>
                                                <label>
                                                    @if (SelectedThemes.Any(t => t.ThemeId == theme.Id))
                                                    {
                                                        <input @onchange="_ => CheckboxChange(theme.Id)" type="checkbox" checked="checked" value="@theme.Id" />
                                                    }
                                                    else
                                                    {
                                                        <input @onchange="_ => CheckboxChange(theme.Id)" type="checkbox" value="@theme.Id" />
                                                    }
                                                    &nbsp;@theme.ThemeName
                                                </label>
                                            </li>
                                        }
                                    </ul>
                                </li>
                            }
                        }
                    </ul>
                </p>
                <hr />
                <p>
                    <button class="btn btn-link text-decoration-none" type="button" data-bs-toggle="collapse" data-bs-target="#notActualThemes" aria-expanded="false" aria-controls="notActualThemes">
                        Остальные темы
                    </button>

                    <div class="collapse" id="notActualThemes">
                        <ul>
                            @foreach (var scope in AllScopes)
                            {
                                @if (scope.Themes.Count(t => !t.Actual) > 0)
                                {
                                    <li>
                                        <h6 style="color:blue">@scope.ScopeName</h6>
                                        <ul>
                                            @foreach (var theme in scope.Themes.Where(t => !t.Actual))
                                            {
                                                <li>
                                                    <label>
                                                        @if (SelectedThemes.Any(t => t.ThemeId == theme.Id))
                                                        {
                                                            <input @onchange="_ => CheckboxChange(theme.Id)" type="checkbox" checked="checked" value="@theme.Id" />
                                                        }
                                                        else
                                                        {
                                                            <input @onchange="_ => CheckboxChange(theme.Id)" type="checkbox" value="@theme.Id" />
                                                        }
                                                        &nbsp;@theme.ThemeName
                                                    </label>
                                                </li>
                                            }
                                        </ul>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" @onclick="async _ => await UpdateThemes()" class="btn btn-outline-success">Сохранить</button>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public List<DiaryScope> AllScopes { get; set; } = new List<DiaryScope>();

    [Parameter]
    public List<DiaryRecordTheme> SelectedThemes { get; set; } = new List<DiaryRecordTheme>();

    [Parameter]
    public Func<IEnumerable<Guid>, Task>? UpdateRecordThemes { get; set; }

    private List<string> ThemesList
    {
        get
        {
            try
            {                
                return SelectedThemes?.Select(tr => tr.Theme?.ThemeName ?? "")?.ToList() ?? new List<string>();
            }
            catch (Exception exc)
            {
                CriticalError = exc.Message;
                return new List<string>();
            }
        }
    }

    private string AllThemes => string.Join(" | ", ThemesList);

    private List<Guid> _changedThemesList = new List<Guid>();

    private string? CriticalError { get; set; }


    protected override void OnParametersSet()
    {
        try
        {
            _changedThemesList = SelectedThemes.Select(st => st.ThemeId).ToList();
            base.OnParametersSet();
        }
        catch (Exception exc)
        {
            CriticalError = exc.Message;
        }
    }

    private void CheckboxChange(Guid themeId)
    {
        try
        {
            if (_changedThemesList.Contains(themeId))
            {
                _changedThemesList.Remove(themeId);
            }
            else
            {
                _changedThemesList.Add(themeId);
            }            
        }
        catch (Exception exc)
        {
            CriticalError = exc.Message;
        }
    }

    private async Task UpdateThemes()
    {
        try
        {
            await _JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('themesFilter')).hide()");

            if (UpdateRecordThemes != null)
            {
                await UpdateRecordThemes(_changedThemesList);
            }            
        }
        catch (Exception exc)
        {
            CriticalError = exc.Message;
        }
    }
}
