@using RiseDiary.Model

@namespace RiseDiary.WebUI.Pages.Records

@inject IRecordsImagesService RecordsImageService 
@inject IImagesService ImagesService
@inject IAppSettingsService AppSettingsService
@inject IJSRuntime JSRuntime 

@implements IDisposable

<div class="row">
    @if (_criticalError is not null)
    {
        <p style="color:red">Произошла критическая ошибка: @_criticalError</p>
    }
    else
    {
        @if (!_addMode)
        {           
            <div class="col-12">
                <div class="row">
                    @foreach (var image in _recordImagesRefsMutable)
                    {
                        <div class="col-lg-3 col-md-6 col-sm-12 p-3">
                            <Thumbnail RecordId="RecordId" Image="@image?.Image">
                                @if ((image?.Order ?? 0) > 1)
                                {
                                    <button type="button" class="btn btn-link px-0" @onclick="async _ => await UpdateImageOrder(image?.ImageId, (image?.Order ?? 0) - 1)">
                                        <img src="img/arrow-left.svg" />
                                    </button>
                                }

                                <button type="button" class="btn btn-sm btn-outline-secondary mx-3" @onclick="async _ => await RemoveImageLink(image?.ImageId)" title="Открепить">Открепить</button>
                                
                                @if ((image?.Order ?? 0) < _recordImagesRefsMutable.Select(x => x.Order).DefaultIfEmpty().Max())
                                {
                                    <button type="button" class="btn btn-link px-0" @onclick="async _ => await UpdateImageOrder(image?.ImageId, (image?.Order ?? 0) + 1)">
                                        <img src="img/arrow-right.svg" />
                                    </button>
                                }
                            </Thumbnail>
                        </div>
                    }
                </div>
            </div>

            <div class="col-12">
                <button class="btn btn-outline-info m-1 btn-sm" @onclick="async _ => await ShowAvailableImages()">Прикрепить изображение</button>
                <a href="/images/upload?recordId=@RecordId" class="btn btn-outline-info m-1 btn-sm">Загрузить изображение</a>
            </div>
        }
        else
        {
            <div class="col-12">
                <div class="row">
                    
                    <div class="col-lg-10 col-md-9 col-sm-12">
                        <input @bind="_nameFilter" @bind:event="oninput" type="text" class="form-control form-control-sm my-1" id="imageFilter" name="imageFilter" placeholder="поиск по названию" />
                    </div>

                    <div class="col-lg-2 col-md-3 col-sm-12">
                         <button class="btn btn-outline-info my-1 btn-sm" @onclick="async _ => await ShowAvailableImages()" title="Фильтрация картинок по названию">Применить</button>
                    </div>

                </div>                
            </div>

            <div class="col-12">
                <div class="row">
                    @foreach (var image in _availableImages)
                    {
                        <div class="col-lg-2 col-md-4 col-sm-6 p-3">
                            <Thumbnail RecordId="RecordId" Image="@image">
                                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="async _ => await LinkImage(image)" title="Прикрепить изображение к записи">Прикрепить</button>
                            </Thumbnail>
                        </div>
                    }
                </div>
            </div>

            <div class="col-12">
                <button class="btn btn-outline-info m-1 btn-sm" hidden="@_allImagesDisplayed" @onclick="async _ => await ShowAvailableImages(_pagesCount + 1)" title="Показать больше картинок">Показать больше</button>
                <button class="btn btn-outline-secondary m-1 btn-sm" @onclick="_ => HideAvailableImages()" title="Закрыть список доступных изображений">Закрыть</button>
            </div>
        }
    }
</div>

@code {

    [Parameter]
    public Guid RecordId { get; set; }

    private ICollection<DiaryRecordImage> _recordImagesRefsMutable = Array.Empty<DiaryRecordImage>();   

    private bool _addMode;

    private int? _pageSize;

    private int _pagesCount;

    private bool _allImagesDisplayed;

    private ICollection<DiaryImage> _availableImages = Array.Empty<DiaryImage>();

    private string? _criticalError;

    private string? _nameFilter;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        try
        {
            _recordImagesRefsMutable = await RecordsImageService.GetLinkedImagesList(RecordId, cancellationToken: _cts.Token);
        }
        catch (OperationCanceledException)
        {
        }
        catch (Exception exc)
        {
            _criticalError = exc.Message;
        }
    }

    private async Task ShowAvailableImages(int? pagesCount = null)
    {
        try
        {
            _addMode = true;
            _pagesCount = pagesCount ?? 1;
            _pageSize ??= await AppSettingsService.GetAppSettingInt(RiseDiary.Shared.AppSettingsKey.AvailableImagesPageSize) ?? 30;

            int imagesCount = await ImagesService.GetImagesCount(imageNameFilter: _nameFilter, 
                recordId: RecordId, cancellationToken: _cts.Token);

            _availableImages = await ImagesService.FetchImageSet(0, _pagesCount * _pageSize.Value, 
                imageNameFilter: _nameFilter, recordId: RecordId, cancellationToken: _cts.Token);

            _allImagesDisplayed = imagesCount <= _availableImages.Count;
        }
        catch (OperationCanceledException)
        {
        }
        catch (Exception exc)
        {
            _criticalError = exc.Message;
        }
    }

    private void HideAvailableImages()
    {
        _addMode = false;
        _nameFilter = null;
        _pagesCount = 0;
        _availableImages = Array.Empty<DiaryImage>();
    }

    private async Task LinkImage(DiaryImage image)
    {
        try
        {
            var newRecordImage = await RecordsImageService.AddRecordImage(RecordId, image.Id);

            _recordImagesRefsMutable.Add(newRecordImage);

            _availableImages.Remove(image);
        }
        catch (Exception exc)
        {
            _criticalError = exc.Message;
        }
    }

    private async Task RemoveImageLink(Guid? imageId)
    {
        try
        {
            imageId = imageId ?? Guid.Empty;
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Открепить изобраение от записи?"))
            {
                await RecordsImageService.RemoveRecordImage(RecordId, imageId.Value);
                var img = _recordImagesRefsMutable.Single(ri => ri.ImageId == imageId);
                _recordImagesRefsMutable.Remove(img);
            }
        }
        catch (Exception exc)
        {
            _criticalError = exc.Message;
        }
    }

    private async Task UpdateImageOrder(Guid? imageId, int order)
    {
        if (!imageId.HasValue) return;

        try
        {
            _recordImagesRefsMutable = await RecordsImageService.ChangeRecordImageOrder(RecordId, imageId.Value, order);
        }
        catch (Exception exc)
        {
            _criticalError = exc.Message;
        }
    }

    private CancellationTokenSource _cts = new CancellationTokenSource();

    public void Dispose()
    {
        _cts?.Cancel();
    }
}