@using RiseDiary.Model
@using Blazored.TextEditor

@namespace RiseDiary.WebUI.Pages.Records

@inject IRecordsService RecordsService
@inject IJSRuntime JSRuntime
@inject BrowserTimeOffsetService BrowserTimeOffset

@implements IDisposable

@if (_criticalError is not null)
{
    <p style="color:red">Произошла критическая ошибка: @_criticalError</p>
}
else
{
    <div class="col-12">
        <div class="row mt-3">

            <div class="col-11 text-center my-2">
                <RecordHeader  Record="@_record"  />
            </div>

            <div class="col-1 my-2">
                <LandingRecord RecordId="@RecordId" />
            </div>

            <div class="col-11 mb-2 text-center">
                <RecordThemes RecordId="@RecordId" />
            </div>
        </div>
    </div>

    <div class="col-12">
        <div class="row mt-3">
            <div class="col-12">
                <TextEditor Text="@_recordText" SaveText="UpdateRecordText" />
            </div>
        </div>
    </div>

    <hr />

    <div class="col-12">
        <RecordImages RecordId="RecordId" />
    </div>

    <hr />

   <RecordCogitations Record="@_record" />

    <div class="col-12 mb-2">
        <hr />
        <div class="row">
             <div class="col-md-4 col-sm-12 mb-2 text-center">
                <p style="color:lightslategray">Дата создания: <b>@_createdDate</b></p>
            </div>

            <div class="col-md-4 col-sm-12 mb-2 text-center">
                <p style="color:lightslategray">Дата изменения: <b>@_modifiedDate</b></p>
            </div>

            <div class="col-md-4 col-sm-12 mb-2 text-center">
                 <button type="button" class="btn btn-sm btn-outline-danger" title="Удалить запись" @onclick="async _ => await DeleteRecord()">Удалить запись</button>
            </div>
        </div>
       
    </div>
}

@code { 

    [Parameter]
    public Guid RecordId { get; set; }

    private DiaryRecord _record = null!;

    private string _createdDate = "";

    private string _modifiedDate = "";

    private string _recordText = "";

    private string? _criticalError;

    private CancellationTokenSource _cts = new CancellationTokenSource();

    public void Dispose()
    {
        _cts?.Cancel();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        try
        {
            _record = await RecordsService.FetchRecordById(RecordId, _cts.Token);

            _createdDate = BrowserTimeOffset.ToLocalString(_record.CreateDate);
            _modifiedDate = BrowserTimeOffset.ToLocalString(_record.ModifyDate);
            _recordText = _record.Text;
        }
        catch (RecordNotFoundException)
        {
            await JSRuntime.InvokeVoidAsync("redirectToIndex");
            return;
        }
        catch (OperationCanceledException)
        {
        }
        catch (Exception exc)
        {
            _criticalError = exc.Message;
        }
    }

    private async Task UpdateRecordText(string text)
    {
        try
        {
            await RecordsService.UpdateRecord(RecordId, null, null, text.Trim());
            _recordText = text.Trim();
            _modifiedDate = BrowserTimeOffset.ToLocalString(DateTime.UtcNow);
        }
        catch (Exception exc)
        {
            _criticalError = exc.Message;
        }
    }    

    private async Task DeleteRecord()
    {
        try
        {
            bool conf = await JSRuntime.InvokeAsync<bool>("confirm", "Удалить запись?");

            if (conf)
            {
                await RecordsService.DeleteRecord(RecordId);
                await JSRuntime.InvokeVoidAsync("redirectToReferrer");
            }
        }

        catch (Exception exc)
        {
            _criticalError = exc.Message;
        }
    }

}
