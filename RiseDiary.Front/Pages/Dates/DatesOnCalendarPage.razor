@page "/dates/oncalendar"

@using RiseDiary.Front.JsHelpers;
@using RiseDiary.Shared.Calendar;

@inherits UIComponentBase
@implements IDisposable

@inject NavigationManager NavManager
@inject HttpClient Http
@inject CalendarComponent Calendar
@inject ILogger<DatesOnCalendarPage> Logger

<PageTitle>Все даты</PageTitle>


<Spinner Loading="Loading">
    <div class="row">
        @if (_datesList != null)
        {
            <DatesSubmenu CurrentPageUriPart="oncalendar" />
        }

        <div class="col-12">
            <div id="calendar" style="height:450px"></div>
        </div>

        @if (_selectedDates != null)
        {
            <div class="modal fade show" style="display: block">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@_selectedDatesHeader</h5>
                            <button type="button" class="btn-close" @onclick="_ => ClearSelected()"></button>
                        </div>

                        <div class="modal-body" id="modalBody">
                            <ul>
                                @foreach(var dto in _selectedDates)
                                {
                                    <li>
                                        <NavLink href="@GetRecordLink(dto)">@dto.Name</NavLink>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-backdrop fade show"></div>
        }
    </div>

</Spinner>


@code {
    private List<CalendarDateDto>? _datesList;

    private DotNetObjectReference<DateClickHandler>? _handlerRef;

    private List<CalendarDateDto>? _selectedDates;
    private string? _selectedDatesHeader;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            await StartApiRequest();

            _datesList = await Http.GetFromJsonAsync<List<CalendarDateDto>>("api/dates/calendar", Token);

            var datesOnly = (_datesList ?? new())
                .Select(x => x.StartDate)
                .Distinct()
                .ToList();

            _handlerRef = await Calendar.CreateCalendar(datesOnly, OnDateClick);

            await FinishApiRequest(null);
        }
        catch (Exception exc)
        {
            _datesList = new();
            Logger.LogWarning(exc, "Error on initializing");
            await FinishApiRequest(exc.Message);
        }
    }

    private void OnDateClick(DateOnly date)
    {
        _selectedDates = null;
        _selectedDatesHeader = null;

        if (_datesList != null && _datesList.Any(x => x.StartDate == date))
        {
            _selectedDates = _datesList.Where(x => x.StartDate == date).ToList();
            _selectedDatesHeader = $"События {date:yyyy.MM.dd}";
        }

        StateHasChanged();
    }

    private void ClearSelected()
    {
        _selectedDates = null;
        _selectedDatesHeader = null;
    }

    public string GetRecordLink(CalendarDateDto dto) => NavManager.GetUriWithQueryParameters("records/view", new Dictionary<string, object?>
        {
            ["recordId"] = dto.Id
        });

    public new void Dispose()
    {
        _handlerRef?.Dispose();
        _handlerRef = null;
        base.Dispose();
    }   
}
