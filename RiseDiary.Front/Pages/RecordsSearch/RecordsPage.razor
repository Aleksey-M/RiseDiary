@page "/records"

@using RiseDiary.Shared.Records;
@using RiseDiary.Shared.Scopes;

@inherits UIComponentBase

<PageTitle>Записи</PageTitle>

<Spinner Loading="@Loading">
    @if (_displayTypeParameters != null && _displayType != null)
    {
        <div class="col-12">
            <div class="px-3">
                <Pager Pages="@_pages" Navigate="@Navigate" />
            </div>
        </div>

        <RecordsFilters AreaName="records" AllScopes="@_allScopes" Filters="@_filters" OnSearch="Search" />

        <DynamicComponent Type="@_displayType" Parameters="@_displayTypeParameters" />

        <div class="col-12">
            <div class="px-3">
                <Pager Pages="@_pages" Navigate="@Navigate" />
            </div>
        </div>
    }
</Spinner>

@code {
    [Inject]
    public HttpClient Http { get; set; } = null!;

    [Inject]
    public ILogger<RecordsPage> Logger { get; set; } = null!;

    [Inject]
    public NavigationManager NavManager { get; set; } = null!;

    private RecordsSearchFilters _filters = new();
    private int _page = 1;

    private PagesInfo _pages = null!;

    private Type? _displayType;

    private Dictionary<string, object>? _displayTypeParameters;


    private async Task LoadData(int? page = null, RecordsSearchFilters? filters = null)
    {
        _filters = filters ?? _filters;
        _page = page ?? _page;

        try
        {
            await StartApiRequest();

            var queryParams = new Dictionary<string, object?>
            {
                ["from"] = _filters.From,
                ["to"] = _filters.To,
                ["combinedThemes"] = _filters.CombinedThemes,
                ["expanded"] = _filters.Expanded,
                ["name"] = _filters.Name,
                ["themes"] = _filters.Themes,
                ["page"] = _page
            };

            var uri = NavManager.GetUriWithQueryParameters("api/records", queryParams);
            _displayType = _filters.Expanded ? typeof(RecordsTableExpanded) : typeof(RecordsTable);

            if (_filters.Expanded)
            {
                var response = await Http.GetFromJsonAsync<RecordsPageDto<RecordDto>>(uri, Token);
                _pages = response?.PagesInfo ?? new();

                var records = response?.Records ?? new List<RecordDto>();
                records.ForEach(x => x.SetBaseUri(NavManager.BaseUri));

                _displayTypeParameters = new()
                    {
                        ["Records"] = records,
                        ["TotalCount"] = _pages.TotalItems
                    };
            }
            else
            {
                var response = await Http.GetFromJsonAsync<RecordsPageDto<RecordListItemDto>>(uri, Token);
                _pages = response?.PagesInfo ?? new();

                var records = response?.Records ?? new List<RecordListItemDto>();
                records.ForEach(x => x.SetBaseUri(NavManager.BaseUri));

                _displayTypeParameters = new()
                    {
                        ["Records"] = records,
                        ["TotalCount"] = _pages.TotalItems
                    };
            }

            await FinishApiRequest(null);
        }
        catch (Exception exc)
        {
            Logger.LogError(exc, "Error on page data loading");
            await FinishApiRequest(exc.Message);
        }
    }

    private List<ScopeDto> _allScopes = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            Loading = true;
            _allScopes = await Http.GetFromJsonAsync<List<ScopeDto>>("api/scopes", Token) ?? new();
            _allScopes.ForEach(x => x.SetBaseUri(NavManager.BaseUri));
            await LoadData();
        }
        catch (Exception exc)
        {
            Logger.LogError(exc, "Error on page initialization");
            await FinishApiRequest(exc.Message);
        }
    }

    private Task Search(RecordsSearchFilters filters) => LoadData(filters: filters);
    private Task Navigate(int page) => LoadData(page: page);
}
