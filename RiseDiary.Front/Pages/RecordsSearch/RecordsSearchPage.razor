@page "/records/search"
@using RiseDiary.Shared.Records;

@inherits UIComponentBase

<PageTitle>Поиск записей по фрагменту названия или текста</PageTitle>


<Spinner Loading="Loading">
    @if (_displayTypeParameters != null && _displayType != null)
    {
        <div class="col-12">
            <div class="px-3">
                <Pager Pages="@_pages" Navigate="@Navigate" />
            </div>
        </div>

        <RecordsTextSearchFilters OnSearch="@Search" />

        <DynamicComponent Type="@_displayType" Parameters="@_displayTypeParameters" />

        <div class="col-12">
            <div class="px-3">
                <Pager Pages="@_pages" Navigate="@Navigate" />
            </div>
        </div>
    }
</Spinner>

@code {
    [Inject]
    public HttpClient Http { get; set; } = null!;

    [Inject]
    public ILogger<RecordsSearchPage> Logger { get; set; } = null!;

    [Inject]
    public NavigationManager NavManager { get; set; } = null!;

    private string _searchText = string.Empty;
    private bool _expanded = true;
    private int _page = 1;

    private PagesInfo _pages = null!;

    private Type? _displayType;

    private Dictionary<string, object>? _displayTypeParameters;


    private async Task LoadData(string? filter = null, bool? expanded = null, int? page = null)
    {
        _searchText = filter ?? _searchText;
        _expanded = expanded ?? _expanded;
        _page = page ?? _page;

        try
        {
            await StartApiRequest();

            Dictionary<string, object?> SearchParams = new()
                {
                    ["searchText"] = _searchText,
                    ["expanded"] = _expanded,
                    ["page"] = _page
                };

            var uri = NavManager.GetUriWithQueryParameters("api/records/search", SearchParams);
            _displayType = _expanded ? typeof(RecordsTableExpanded) : typeof(RecordsTable);

            if (_expanded)
            {
                var response = await Http.GetFromJsonAsync<RecordsPageDto<RecordDto>>(uri, Token);
                _pages = response?.PagesInfo ?? new();

                _displayTypeParameters = new()
                    {
                        ["Records"] = response?.Records ?? new List<RecordDto>(),
                        ["TotalCount"] = _pages.TotalItems
                    };
            }
            else
            {
                var response = await Http.GetFromJsonAsync<RecordsPageDto<RecordListItemDto>>(uri, Token);
                _pages = response?.PagesInfo ?? new();

                _displayTypeParameters = new()
                    {
                        ["Records"] = response?.Records ?? new List<RecordListItemDto>(),
                        ["TotalCount"] = _pages.TotalItems
                    };
            }

            await FinishApiRequest(null);
        }
        catch (Exception exc)
        {
            Logger.LogError(exc, "Error on page data loading");
            await FinishApiRequest(exc.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
    }

    private Task Search(string filter, bool expanded) => LoadData(filter, expanded, 1);
    private Task Navigate(int page) => LoadData(page: page);
}
