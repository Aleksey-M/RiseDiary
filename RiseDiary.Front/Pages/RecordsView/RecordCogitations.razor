@using FluentValidation;
@using RiseDiary.Shared.Records;

@inherits UIComponentBase

<div class="col-12 text-center">
    <h4 style="color:darkgrey">Комментарии (осмысления)</h4>
</div>

@if (_showCogitationEditor)
{
    <TextEditor Text="@string.Empty" SaveButtonName="Добавить" OnSaveText="CreateNewCogitation" EditorOnly="true" />
}
else
{
    <div class="col-12 mb-2">
        <div class="offset-lg-1 col-lg-10 col-md-12 col-sm-12">
            <button type="button" class="btn btn-outline-success btn-sm mt-1" title="Добавить комментарий" @onclick="_ => _showCogitationEditor = true">
                Добавить комментарий (осмысление)
            </button>
        </div>
    </div>
}


@foreach (var cog in RecordDto.Cogitations)
{
    <div class="col-12 my-1" @key="@cog.Id">
            <p class="offset-lg-1 col-lg-10 col-md-12 col-sm-12 mt-2">
                <b class="align-middle">@GetCogitationDate(cog.CreateDate)</b>
                <button class="btn btn-link" title="Удалить комментарий (осмысление)" @onclick="async _ => await DeleteCogitation(cog.Id)">
                    <img src="img/trash.svg" width="20" height="20" />
                </button>
            </p>

            <TextEditor Text="@cog.Text" SaveButtonName="Сохранить" OnSaveText="text => UpdateCogitationText(cog.Id, text)" />
    </div>
}

@code {
    [Inject]
    public CreateCogitationValidator CreateValidator { get; set; } = null!;

    [Inject]
    public UpdateCogitationValidator UpdateValidator { get; set; } = null!;

    [Inject]
    public HttpClient Http { get; set; } = null!;

    [Inject]
    public ILogger<RecordCogitations> Logger { get; set; } = null!;

    [Inject]
    public IJSRuntime JsRuntime { get; set; } = null!;

    [Inject]
    public NavigationManager NavManager { get; set; } = null!;

    [Parameter, EditorRequired]
    public RecordEditDto RecordDto { get; set; } = null!;

    private bool _showCogitationEditor;

    private string GetCogitationDate(DateTime date) => date.ToLocalTime().ToString("yyyy.MM.dd HH.mm.ss") ?? string.Empty;


    private async Task CreateNewCogitation(string text)
    {
        var dto = new CreateCogitationDto
            {
                Text = text,
                RecordId = RecordDto.RecordId
            };

        CreateValidator.ValidateAndThrow(dto);

        dto.SetHostAndPortPlaceholder(NavManager.BaseUri);

        var response = await Http.PostAsJsonAsync($"api/records/{RecordDto.RecordId}/cogitations", dto);
        var responseContent = await GetCheckedResponseContent<string?>(response);
        if (responseContent == null) return;

        if (!Guid.TryParse(responseContent, out var id))
        {
            throw new Exception($"Неверный формат Id: {responseContent}");
        }

        RecordDto.Cogitations.Insert(0, new CogitationDto
            {
                CreateDate = DateTime.Now,
                Id = id,
                Text = InternalLinksHelper.SetBaseUri(dto.Text, NavManager.BaseUri)
            });

        Logger.LogInformation("Created new cogitation with id = '{cogitationId}' for record with id='{recordId}'", id, dto.RecordId);
        _showCogitationEditor = false;
        StateHasChanged();
    }

    private async Task DeleteCogitation(Guid id)
    {
        bool conf = await JsRuntime.InvokeAsync<bool>("confirm", "Удалить запись?");
        if (!conf) return;

        await Http.DeleteAsync($"api/records/{RecordDto.RecordId}/cogitations/{id}");
        var cogitation = RecordDto.Cogitations.Single(x => x.Id == id);
        RecordDto.Cogitations.Remove(cogitation);

        Logger.LogInformation("Cogitation with Id = '{cogitationId}' was deleted", id);
    }

    private async Task UpdateCogitationText(Guid cogitationId, string text)
    {
        var dto = new UpdateCogitationDto
            {
                CogitationId = cogitationId,
                Text = text,
                RecordId = RecordDto.RecordId
            };

        UpdateValidator.ValidateAndThrow(dto);

        var cogitation = RecordDto.Cogitations.Single(x => x.Id == cogitationId);
        cogitation.Text = dto.Text;

        dto.SetHostAndPortPlaceholder(NavManager.BaseUri);

        await Http.PutAsJsonAsync($"api/records/{RecordDto.RecordId}/cogitations/{dto.CogitationId}", dto);
        StateHasChanged();
    }
}
