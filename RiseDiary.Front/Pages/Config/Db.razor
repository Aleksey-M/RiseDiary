@page "/settings/db"

@using RiseDiary.Shared.Database

@inject HttpClient Http
@inject IJSRuntime JsRuntime

@inherits UIComponentBase


<PageTitle>Файл базы данных</PageTitle>

<Spinner Loading="Loading">
    @if (_dbInfo != null)
    {
        <div class="offset-md-2 col-md-8 col-sm-12">

            @if (HasError)
            {
                <pre style="color:red;">@ErrorMessage</pre>
            }
            else
            {

                <div class="mt-3 mb-3">
                    <p style="word-break:break-word"><b>Файл базы данных:</b> <i>@_dbInfo.FileName (<b>@_dbInfo.FileSize</b>)</i></p>
                </div>

                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Удаленные данные</th>
                            <th>Количество</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Записи</td>
                            <td><i>@_dbInfo.DeletedRecords</i></td>
                        </tr>
                        <tr>
                            <td>Осмысления (комментарии)</td>
                            <td><i>@_dbInfo.DeletedCogitations</i></td>
                        </tr>
                        <tr>
                            <td>Области интересов</td>
                            <td><i>@_dbInfo.DeletedScopes</i></td>
                        </tr>
                        <tr>
                            <td>Темы</td>
                            <td><i>@_dbInfo.DeletedThemes</i></td>
                        </tr>
                        <tr>
                            <td>Изображения</td>
                            <td><i>@_dbInfo.DeletedImages</i></td>
                        </tr>
                        <tr>
                            <td>Связи запись-тема</td>
                            <td><i>@_dbInfo.DeletedRecordThemes</i></td>
                        </tr>
                        <tr>
                            <td>Связи запись-изображение</td>
                            <td><i>@_dbInfo.DeletedRecordImages</i></td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="2">
                                <input type="button" class="btn btn-danger btn-sm" value="Очистить базу" @onclick=CleanupDatabase />
                            </td>
                        </tr>
                    </tfoot>
                </table>
            }
        </div>
    }
</Spinner>


@code {

    private SqliteDbInfoDto? _dbInfo;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            await StartApiRequest();
            _dbInfo = await Http.GetFromJsonAsync<SqliteDbInfoDto>("api/sqlitedb/info", Token);

            await FinishApiRequest(null);
        }
        catch (Exception exc)
        {
            _dbInfo = new();
            await FinishApiRequest(exc.Message);
        }
    }

    private async Task CleanupDatabase()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm",
            "ВНИМАНИЕ!!! После выполнения очистки, восстановить удаленные данные будет невозможно. Продолжить?");

        if (!confirmed) return;

        try
        {
            await StartApiRequest();

            var resp = await Http.PostAsJsonAsync("api/sqlitedb/cleanup", new { }, Token);
            var ok = await CheckSuccessResponse(resp);

            if (!ok) return;

            _dbInfo = await Http.GetFromJsonAsync<SqliteDbInfoDto>("api/sqlitedb/info", Token);

            await FinishApiRequest(null);
        }
        catch (Exception exc)
        {
            _dbInfo = new();
            await FinishApiRequest(exc.Message);            
        }
    }
}
