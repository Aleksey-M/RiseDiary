@page "/settings/hostandport"

@using RiseDiary.Shared.Settings
@using RiseDiary.Shared

@inject HttpClient Http

@inherits UIComponentBase


<PageTitle>Базовый HOST и PORT</PageTitle>

@if (_hostAndPortInfo == null || Loading)
{
    <Spinner />
}
else
{
    if (HasError)
    {
        <pre style="color:red;">@ErrorMessage</pre>
    }

    <div class="row mt-2 mb-3">
        <div class="col-lg-9 col-md-8 col-sm-12 mt-1">
            <b>Значение базового url приложения, которое будет заменяться при сохранении внутренних ссылок для обеспечения их корректности нa разных средах</b>
            <p>Базовый URI текущей страницы: <i>@_hostAndPortInfo.CurrentHostAndPort</i></p>
        </div>

        <div class="col-lg-3 col-md-4 col-sm-12 mt-1">
            <input type="text" required="required" class="form-control" @bind-value="_hostAndPortInfo.HostAndPortSetting" @bind-value:event="onchange" />
        </div>        
    </div>

    <div class="row mt-1">
        <div class="text-center">
            <button @onclick="UpdateHostAndPort" type="button" class="btn btn-outline-success">Сохранить</button>
        </div>
    </div>
}


@code {

    private HostAndPortInfo? _hostAndPortInfo;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            _hostAndPortInfo = await Http.GetFromJsonAsync<HostAndPortInfo>("api/settings/host", Token);
        }
        catch (Exception exc)
        {
            ErrorMessage = exc.Message;
            _hostAndPortInfo = new();
        }
    }

    private async Task UpdateHostAndPort()
    {
        if (_hostAndPortInfo!.HostAndPortSetting.Length < 10)
        {
            ErrorMessage = "Базовый URI не может быть короче 10 символов";
            return;
        }

        try
        {
            await StartApiRequest();

            var dto = new AppSettingDto
                {
                    Key = AppSettingsKey.HostAndPort,
                    Value = _hostAndPortInfo.HostAndPortSetting
                };

            var resp = await Http.PutAsJsonAsync($"api/settings/{(int)AppSettingsKey.HostAndPort}", dto);
            await CheckSuccessResponse(resp);

            _hostAndPortInfo = await Http.GetFromJsonAsync<HostAndPortInfo>("api/settings/host", Token);

            await FinishApiRequest(null);
        }
        catch (Exception exc)
        {
            await FinishApiRequest(exc.Message);
            _hostAndPortInfo = new();
        }
    }
}
