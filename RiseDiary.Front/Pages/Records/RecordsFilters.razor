@using RiseDiary.Shared
@using RiseDiary.Shared.Records;
@using RiseDiary.Shared.Scopes;

<div class="row">

    <div class="col-lg-2 col-sm-6 my-2">
        <InputDate @bind-Value=@Filters.From class="form-control" title="От" />
    </div>

    <div class="col-lg-2 col-sm-6 my-2">
        <InputDate @bind-Value=@Filters.To class="form-control" title="До" />
    </div>

    <div class="col-lg-3 col-sm-12 my-2">
        <InputText @bind-Value=@Filters.Name class="form-control" placeholder="Фильтр по названию" />
    </div>

    <div class="col-lg-1 col-sm-6 my-2">

        <button type="button" class="btn btn-outline-secondary" @onclick=@ShowThemes>Темы</button>

        <ModalDialog Show="_themesDisplayed" Title="Фильтр по темам" OnClose="@HideThemes">
            <ChildContent>
                <p>
                    <label>
                        <InputCheckbox @bind-Value=@Filters.CombinedThemes />
                        Выводить записи, которые относятся к любой выбранной теме (по правилу 'ИЛИ')
                    </label>
                </p>

                <hr />

                <p>
                    <h6>Актуальные темы</h6>
                    <ScopeFilter AllScopes=@AllScopes DisplayActual=true Selection="@_themesDictionary" />
                </p>

                @if (!_allListDisplayed)
                {
                    <button class="btn btn-link text-decoration-none" type="button" @onclick="_ => _allListDisplayed = true">
                        Остальные темы
                    </button>
                }
                else
                {
                    <p>
                        <ScopeFilter AllScopes=@AllScopes DisplayActual=false Selection="@_themesDictionary" />
                    </p>
                }
            </ChildContent>

            <FooterContent>
                <button type="submit" class="btn btn-outline-info" style="float: right" @onclick=@ApplyFilters>Применить</button>
            </FooterContent>
        </ModalDialog>

    </div>

    <div class="col-lg-2 col-sm-6 my-3">
        <InputCheckbox @bind-Value=@Filters.Expanded name="expanded" id="expanded" />
        <label for="expanded">Развернуто</label>
    </div>

    <div class="col-lg-2 col-sm-12 my-2">
        <button class="btn btn-outline-info" style="float: right" @onclick=@ApplyFilters>Применить</button>
    </div>
</div>


@code {

    [Parameter, EditorRequired]
    public string AreaName { get; set; } = "";

    [Parameter, EditorRequired]
    public IEnumerable<ScopeDto> AllScopes { get; set; } = null!;

    [Parameter, EditorRequired]
    public RecordsQueryFilters Filters { get; set; } = null!;

    [Parameter, EditorRequired]
    public Action<RecordsQueryFilters> OnSearch { get; set; } = _ => { };


    private bool _allListDisplayed;
    private bool _themesDisplayed;
    private Dictionary<Guid, bool>? _themesDictionary; 

    private void ShowThemes()
    {
        _themesDictionary = AllScopes
            .Where(x => x.Themes != null && x.Themes.Count > 0)
            .SelectMany(x => x.Themes!)
            .Select(x => new 
                { 
                    x.ThemeId, 
                    Selected = !string.IsNullOrWhiteSpace(Filters.Themes) && Filters.Themes.Contains(x.ThemeId.ToString()!)
                })
            .ToDictionary(x => x.ThemeId!.Value, x => x.Selected);

        _themesDisplayed = true;
    }

    private void HideThemes()
    {
        _themesDisplayed = false;
        _themesDictionary = null;
    }

    private void ApplyFilters()
    {
        var newFilters = new RecordsQueryFilters
            {
                Expanded = Filters.Expanded,
                From = Filters.From,
                CombinedThemes = Filters.CombinedThemes,
                Name = Filters.Name,
                Themes = Filters.Themes,
                To = Filters.To
            };

        if(_themesDictionary != null)
        {
            newFilters.Themes = string.Join(",", _themesDictionary
                .ToList()
                .Where(x => x.Value)
                .Select(x => x.Key.ToString()));
        }

        HideThemes();

        OnSearch(newFilters);
    }
}
